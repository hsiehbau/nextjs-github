{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport axios from \"axios\";\nconst userInitialState = {};\nconst LOGOUT = \"LOGOUT\";\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case LOGOUT:\n      return _objectSpread({}, state, {\n        user: {}\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  user: userReducer\n});\nexport function logout() {\n  return dispatch => {\n    axios.post(\"/logout\").then(resp => {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log(\"logout failed, \", resp);\n      }\n    }).catch(err => {\n      console.log(\"logout failed, \", err);\n    });\n  };\n} // 保证每次都是新的store\n\nexport default function initializeStore(state) {\n  const store = createStore(allReducers, Object.assign({}, {\n    user: userInitialState\n  }, // 存进来的state优先级最高放到后面\n  state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["D:/GitHub/nextjs-project/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","axios","userInitialState","LOGOUT","userReducer","state","action","type","user","allReducers","logout","dispatch","post","then","resp","status","console","log","catch","err","initializeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,gBAAgB,GAAG,EAAzB;AACA,MAAMC,MAAM,GAAG,QAAf;;AAEA,SAASC,WAAT,CAAqBC,KAAK,GAAGH,gBAA7B,EAA+CI,MAA/C,EAAuD;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,MAAL;AACE,+BACKE,KADL;AAEEG,QAAAA,IAAI,EAAE;AAFR;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD;;AAED,MAAMI,WAAW,GAAGZ,eAAe,CAAC;AAClCW,EAAAA,IAAI,EAAEJ;AAD4B,CAAD,CAAnC;AAIA,OAAO,SAASM,MAAT,GAAkB;AACvB,SAAOC,QAAQ,IAAI;AACjBV,IAAAA,KAAK,CACFW,IADH,CACQ,SADR,EAEGC,IAFH,CAEQC,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACvBJ,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAEJ;AADC,SAAD,CAAR;AAGD,OAJD,MAIO;AACLa,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,IAA/B;AACD;AACF,KAVH,EAWGI,KAXH,CAWSC,GAAG,IAAI;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,GAA/B;AACD,KAbH;AAcD,GAfD;AAgBD,C,CACD;;AACA,eAAe,SAASC,eAAT,CAAyBf,KAAzB,EAAgC;AAC7C,QAAMgB,KAAK,GAAGzB,WAAW,CACvBa,WADuB,EAEvBa,MAAM,CAACC,MAAP,CACE,EADF,EAEE;AACEf,IAAAA,IAAI,EAAEN;AADR,GAFF,EAKE;AACAG,EAAAA,KANF,CAFuB,EAUvBL,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAVI,CAAzB;AAYA,SAAOsB,KAAP;AACD","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport axios from \"axios\";\r\n\r\nconst userInitialState = {};\r\nconst LOGOUT = \"LOGOUT\";\r\n\r\nfunction userReducer(state = userInitialState, action) {\r\n  switch (action.type) {\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        user: {}\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n  user: userReducer\r\n});\r\n\r\nexport function logout() {\r\n  return dispatch => {\r\n    axios\r\n      .post(\"/logout\")\r\n      .then(resp => {\r\n        if (resp.status === 200) {\r\n          dispatch({\r\n            type: LOGOUT\r\n          });\r\n        } else {\r\n          console.log(\"logout failed, \", resp);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(\"logout failed, \", err);\r\n      });\r\n  };\r\n}\r\n// 保证每次都是新的store\r\nexport default function initializeStore(state) {\r\n  const store = createStore(\r\n    allReducers,\r\n    Object.assign(\r\n      {},\r\n      {\r\n        user: userInitialState\r\n      },\r\n      // 存进来的state优先级最高放到后面\r\n      state\r\n    ),\r\n    composeWithDevTools(applyMiddleware(ReduxThunk))\r\n  );\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}