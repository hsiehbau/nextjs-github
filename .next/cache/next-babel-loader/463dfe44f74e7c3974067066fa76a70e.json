{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Comp from \"../components/comp\";\nimport { withRouter } from \"next/router\";\nimport Link from \"next/link\";\n\nvar A = function A(_ref) {\n  var router = _ref.router,\n      name = _ref.name;\n  return __jsx(React.Fragment, null, __jsx(Link, {\n    href: \"#aaa\"\n  }, __jsx(\"a\", null, \"A\", router.query.id, \"\\xA0\", name)));\n}; // next会在路由成功切换之前去调用组件上的getinit，拿到return的内容作为props，去渲染该组件\n// nextjs是在等数据加载完了再去显示页面\n\n\nA.getInitialProps = function _callee(ctx) {\n  var promise;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"11111111111111111\");\n          promise = new _Promise(function (resolve) {\n            setTimeout(function () {\n              resolve({\n                name: \"aaaaaa\"\n              });\n            }, 3000);\n          });\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(promise);\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(A);","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/a.js"],"names":["Comp","withRouter","Link","A","router","name","query","id","getInitialProps","ctx","console","log","promise","resolve","setTimeout"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,CAAC,GAAG,SAAJA,CAAI;AAAA,MAAGC,MAAH,QAAGA,MAAH;AAAA,MAAWC,IAAX,QAAWA,IAAX;AAAA,SACR,4BACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE,sBACID,MAAM,CAACE,KAAP,CAAaC,EADjB,UAC2BF,IAD3B,CADF,CADF,CADQ;AAAA,CAAV,C,CASA;AACA;;;AACAF,CAAC,CAACK,eAAF,GAAoB,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACMC,UAAAA,OAFY,GAEF,aAAY,UAAAC,OAAO,EAAI;AACrCC,YAAAA,UAAU,CAAC,YAAM;AACfD,cAAAA,OAAO,CAAC;AACNR,gBAAAA,IAAI,EAAE;AADA,eAAD,CAAP;AAGD,aAJS,EAIP,IAJO,CAAV;AAKD,WANe,CAFE;AAAA;AAAA,2CASLO,OATK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAcA,eAAeX,UAAU,CAACE,CAAD,CAAzB","sourcesContent":["import Comp from \"../components/comp\";\r\nimport { withRouter } from \"next/router\";\r\nimport Link from \"next/link\";\r\n\r\nconst A = ({ router, name }) => (\r\n  <>\r\n    <Link href=\"#aaa\">\r\n      <a>\r\n        A{router.query.id}&nbsp;{name}\r\n      </a>\r\n    </Link>\r\n  </>\r\n);\r\n// next会在路由成功切换之前去调用组件上的getinit，拿到return的内容作为props，去渲染该组件\r\n// nextjs是在等数据加载完了再去显示页面\r\nA.getInitialProps = async ctx => {\r\n  console.log(\"11111111111111111\");\r\n  const promise = new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        name: \"aaaaaa\"\r\n      });\r\n    }, 3000);\r\n  });\r\n  return await promise;\r\n  //   return {\r\n  //     name: \"aaaaaaa\"\r\n  //   };\r\n};\r\nexport default withRouter(A);\r\n"]},"metadata":{},"sourceType":"module"}