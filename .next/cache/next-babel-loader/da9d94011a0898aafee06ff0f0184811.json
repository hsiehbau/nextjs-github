{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// 本文件是用来修改nextjs默认环境的地方，每个页面都回去渲染这个组件，这是个渲染组件，\n// import App from \"next/app\";\nimport App, { Container } from \"next/app\";\nimport \"antd/dist/antd.css\";\nimport Layout from \"../components/Layout\";\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component\n  }) {\n    // const { Component } = ctx;\n    console.log(\"app init\");\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps();\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    console.log(Component);\n    return __jsx(Layout, null, __jsx(Component, pageProps));\n  }\n\n}\n\nexport default MyApp; // import \"antd/dist/antd.css\";\n// import { Provider } from 'react-redux'\n// import Router from 'next/router'\n// import Link from 'next/link'\n// import PageLoading from '../components/PageLoading'\n// import withRedux from '../lib/with-redux'\n// class MyApp extends App {\n//   state = {\n//     context: 'value',\n//     loading: false,\n//   }\n//   startLoading = () => {\n//     this.setState({\n//       loading: true,\n//     })\n//   }\n//   stopLoading = () => {\n//     this.setState({\n//       loading: false,\n//     })\n//   }\n//   componentDidMount() {\n//     Router.events.on('routeChangeStart', this.startLoading)\n//     Router.events.on('routeChangeComplete', this.stopLoading)\n//     Router.events.on('routeChangeError', this.stopLoading)\n//   }\n//   componentWillUnmount() {\n//     Router.events.off('routeChangeStart', this.startLoading)\n//     Router.events.off('routeChangeComplete', this.stopLoading)\n//     Router.events.off('routeChangeError', this.stopLoading)\n//   }\n//   static async getInitialProps(ctx) {\n//     const { Component } = ctx\n//     console.log('app init')\n//     let pageProps = {}\n//     if (Component.getInitialProps) {\n//       pageProps = await Component.getInitialProps(ctx)\n//     }\n//     return { pageProps }\n//   }\n//   render() {\n//     const { Component, pageProps, reduxStore } = this.props\n//     return (\n//       <Container>\n//         <Provider store={reduxStore}>\n//           {this.state.loading ? <PageLoading /> : null}\n//           <Layout>\n//             <Component {...pageProps} />\n//           </Layout>\n//         </Provider>\n//       </Container>\n//     )\n//   }\n// }\n// export default withRedux(MyApp)","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/_app.js"],"names":["App","Container","Layout","MyApp","getInitialProps","Component","console","log","pageProps","render","props"],"mappings":";;AAAA;AACA;AACA,OAAOA,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,OAAO,oBAAP;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AACA,MAAMC,KAAN,SAAoBH,GAApB,CAAwB;AACtB,eAAaI,eAAb,CAA6B;AAAEC,IAAAA;AAAF,GAA7B,EAA4C;AAC1C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEA,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAIH,SAAS,CAACD,eAAd,EAA+B;AAC7BI,MAAAA,SAAS,GAAG,MAAMH,SAAS,CAACD,eAAV,EAAlB;AACD;;AAED,WAAO;AAAEI,MAAAA;AAAF,KAAP;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEJ,MAAAA,SAAF;AAAaG,MAAAA;AAAb,QAA2B,KAAKE,KAAtC;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,WACE,MAAC,MAAD,QACE,MAAC,SAAD,EAAeG,SAAf,CADF,CADF;AAKD;;AArBqB;;AAuBxB,eAAeL,KAAf,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// 本文件是用来修改nextjs默认环境的地方，每个页面都回去渲染这个组件，这是个渲染组件，\n// import App from \"next/app\";\nimport App, { Container } from \"next/app\";\nimport \"antd/dist/antd.css\";\nimport Layout from \"../components/Layout\";\nclass MyApp extends App {\n  static async getInitialProps({ Component }) {\n    // const { Component } = ctx;\n    console.log(\"app init\");\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps();\n    }\n\n    return { pageProps };\n  }\n  render() {\n    const { Component, pageProps } = this.props;\n    console.log(Component);\n    return (\n      <Layout>\n        <Component {...pageProps} />\n      </Layout>\n    );\n  }\n}\nexport default MyApp;\n\n// import \"antd/dist/antd.css\";\n// import { Provider } from 'react-redux'\n// import Router from 'next/router'\n// import Link from 'next/link'\n\n// import PageLoading from '../components/PageLoading'\n\n// import withRedux from '../lib/with-redux'\n\n// class MyApp extends App {\n//   state = {\n//     context: 'value',\n//     loading: false,\n//   }\n\n//   startLoading = () => {\n//     this.setState({\n//       loading: true,\n//     })\n//   }\n\n//   stopLoading = () => {\n//     this.setState({\n//       loading: false,\n//     })\n//   }\n\n//   componentDidMount() {\n//     Router.events.on('routeChangeStart', this.startLoading)\n//     Router.events.on('routeChangeComplete', this.stopLoading)\n//     Router.events.on('routeChangeError', this.stopLoading)\n//   }\n\n//   componentWillUnmount() {\n//     Router.events.off('routeChangeStart', this.startLoading)\n//     Router.events.off('routeChangeComplete', this.stopLoading)\n//     Router.events.off('routeChangeError', this.stopLoading)\n//   }\n\n//   static async getInitialProps(ctx) {\n//     const { Component } = ctx\n//     console.log('app init')\n\n//     let pageProps = {}\n\n//     if (Component.getInitialProps) {\n//       pageProps = await Component.getInitialProps(ctx)\n//     }\n\n//     return { pageProps }\n//   }\n\n//   render() {\n//     const { Component, pageProps, reduxStore } = this.props\n\n//     return (\n//       <Container>\n//         <Provider store={reduxStore}>\n//           {this.state.loading ? <PageLoading /> : null}\n//           <Layout>\n//             <Component {...pageProps} />\n//           </Layout>\n//         </Provider>\n//       </Container>\n//     )\n//   }\n// }\n\n// export default withRedux(MyApp)\n"]},"metadata":{},"sourceType":"module"}