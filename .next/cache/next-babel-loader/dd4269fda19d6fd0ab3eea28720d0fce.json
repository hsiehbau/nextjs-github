{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Comp from \"../components/comp\";\nimport { withRouter } from \"next/router\";\nimport Link from \"next/link\";\n\nconst A = ({\n  router,\n  name\n}) => __jsx(Link, {\n  href: \"#aaa\"\n}, __jsx(\"a\", null, \"A\", router.query.id, \"\\xA0\", name)); // next会在路由成功切换之前去调用组件上的getinit，拿到return的内容作为props，去渲染该组件\n\n\nA.getInitialProps = async () => {\n  console.log(\"11111111111111111\");\n  const promise = new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        name: \"aaaaaa\"\n      });\n    }, 3000);\n  });\n  return await promise; //   return {\n  //     name: \"aaaaaaa\"\n  //   };\n};\n\nexport default withRouter(A);","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/a.js"],"names":["Comp","withRouter","Link","A","router","name","query","id","getInitialProps","console","log","promise","Promise","resolve","setTimeout"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,CAAC,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KACR,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC;AAAX,GACE,sBACID,MAAM,CAACE,KAAP,CAAaC,EADjB,UAC2BF,IAD3B,CADF,CADF,C,CAOA;;;AACAF,CAAC,CAACK,eAAF,GAAoB,YAAY;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACrCC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAAC;AACNR,QAAAA,IAAI,EAAE;AADA,OAAD,CAAP;AAGD,KAJS,EAIP,IAJO,CAAV;AAKD,GANe,CAAhB;AAOA,SAAO,MAAMM,OAAb,CAT8B,CAU9B;AACA;AACA;AACD,CAbD;;AAcA,eAAeV,UAAU,CAACE,CAAD,CAAzB","sourcesContent":["import Comp from \"../components/comp\";\r\nimport { withRouter } from \"next/router\";\r\nimport Link from \"next/link\";\r\n\r\nconst A = ({ router, name }) => (\r\n  <Link href=\"#aaa\">\r\n    <a>\r\n      A{router.query.id}&nbsp;{name}\r\n    </a>\r\n  </Link>\r\n);\r\n// next会在路由成功切换之前去调用组件上的getinit，拿到return的内容作为props，去渲染该组件\r\nA.getInitialProps = async () => {\r\n  console.log(\"11111111111111111\");\r\n  const promise = new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        name: \"aaaaaa\"\r\n      });\r\n    }, 3000);\r\n  });\r\n  return await promise;\r\n  //   return {\r\n  //     name: \"aaaaaaa\"\r\n  //   };\r\n};\r\nexport default withRouter(A);\r\n"]},"metadata":{},"sourceType":"module"}