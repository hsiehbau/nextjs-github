{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useReducer, useLayoutEffect, useContext, useRef, memo, useMemo, useCallback } from \"react\";\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case \"add\":\n      return state + 1;\n\n    case \"minus\":\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  //   const [count, setCount] = useState(0);\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // 拿到的值永远是最新的值，避免闭包陷阱\n      //   setCount(c => c + 1);\n      dispatchCount({\n        type: \"minus\"\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return __jsx(\"span\", null, count);\n}\n\nexport default MyCountFunc;\n\nclass MyCount extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.interval ? clearInterval(this.interval) : null;\n  }\n\n  render() {\n    return __jsx(\"span\", null, count);\n  }\n\n}","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/test/b.js"],"names":["React","useState","useEffect","useReducer","useLayoutEffect","useContext","useRef","memo","useMemo","useCallback","countReducer","state","action","type","MyCountFunc","count","dispatchCount","interval","setInterval","clearInterval","MyCount","Component","componentDidMount","setState","componentWillUnmount","render"],"mappings":";;;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,eAJF,EAKEC,UALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,OARF,EASEC,WATF,QAUO,OAVP;;AAYA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASG,WAAT,GAAuB;AACrB;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAyBb,UAAU,CAACO,YAAD,EAAe,CAAf,CAAzC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC;AACA;AACAF,MAAAA,aAAa,CAAC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAb;AACD,KAJ2B,EAIzB,IAJyB,CAA5B;AAKA,WAAO,MAAMM,aAAa,CAACF,QAAD,CAA1B;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAO,oBAAOF,KAAP,CAAP;AACD;;AACD,eAAeD,WAAf;;AACA,MAAMM,OAAN,SAAsBpB,KAAK,CAACqB,SAA5B,CAAsC;AAAA;AAAA;;AAAA,mCAC5B;AACNN,MAAAA,KAAK,EAAE;AADD,KAD4B;AAAA;;AAIpCO,EAAAA,iBAAiB,GAAG;AAClB,SAAKL,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKK,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWI,KAAX,GAAmB;AAA5B,OAAd;AACD,KAF0B,EAExB,IAFwB,CAA3B;AAGD;;AACDS,EAAAA,oBAAoB,GAAG;AACrB,SAAKP,QAAL,GAAgBE,aAAa,CAAC,KAAKF,QAAN,CAA7B,GAA+C,IAA/C;AACD;;AACDQ,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAOV,KAAP,CAAP;AACD;;AAdmC","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useReducer,\r\n  useLayoutEffect,\r\n  useContext,\r\n  useRef,\r\n  memo,\r\n  useMemo,\r\n  useCallback\r\n} from \"react\";\r\n\r\nfunction countReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"add\":\r\n      return state + 1;\r\n    case \"minus\":\r\n      return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  //   const [count, setCount] = useState(0);\r\n  const [count, dispatchCount] = useReducer(countReducer, 0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // 拿到的值永远是最新的值，避免闭包陷阱\r\n      //   setCount(c => c + 1);\r\n      dispatchCount({ type: \"minus\" });\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return <span>{count}</span>;\r\n}\r\nexport default MyCountFunc;\r\nclass MyCount extends React.Component {\r\n  state = {\r\n    count: 0\r\n  };\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ count: this.state.count + 1 });\r\n    }, 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    this.interval ? clearInterval(this.interval) : null;\r\n  }\r\n  render() {\r\n    return <span>{count}</span>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}