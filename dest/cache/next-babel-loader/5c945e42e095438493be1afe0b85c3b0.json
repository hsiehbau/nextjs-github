{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useReducer, useLayoutEffect, useContext, useRef, memo, useMemo, useCallback } from \"react\";\nimport MyContext from \"../../lib/my-context\";\nimport myContext from \"../../lib/my-context\";\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case \"add\":\n      return state + 1;\n\n    case \"minus\":\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  //   const [count, setCount] = useState(0);\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState(\"lyn\");\n  const context = useContext(myContext); //   const countRef = useRef();\n  //   countRef.current = count;\n  //   const handleAlertButtonClick = () => {\n  //     setTimeout(() => {\n  //       // alert(count)\n  //       alert(countRef.current);\n  //     }, 2000);\n  //   };\n  //   useEffect(() => {\n  //     const interval = setInterval(() => {\n  //       // 拿到的值永远是最新的值，避免闭包陷阱\n  //       //   setCount(c => c + 1);\n  //       dispatchCount({ type: \"minus\" });\n  //     }, 1000);\n  //     return () => clearInterval(interval);\n  //   }, []);\n\n  useEffect(() => {\n    // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\n    console.log(\"effect invokeed\");\n    return () => console.log(\"effect detected\");\n  }, [count]); // useLayoutEffect dom出来前更新内容；里面需要存放很多要等待很长时间的代码，若非需要，尽量不使用\n  //   useLayoutEffect(() => {\n  //     // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\n  //     console.log(\"useLayoutEffect invokeed\");\n  //     return () => console.log(\"useLayoutEffect detected\");\n  //   }, [count]);\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: name,\n    onChange: e => setName(e.target.value)\n  }), __jsx(\"span\", null, count), __jsx(\"button\", {\n    onClick: () => dispatchCount({\n      type: \"minus\"\n    })\n  }, count), __jsx(\"p\", null, context.value));\n}\n\nexport default MyCountFunc;\n\nclass MyCount extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.interval ? clearInterval(this.interval) : null;\n  }\n\n  render() {\n    return __jsx(\"span\", null, count);\n  }\n\n}","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/test/b.js"],"names":["React","useState","useEffect","useReducer","useLayoutEffect","useContext","useRef","memo","useMemo","useCallback","MyContext","myContext","countReducer","state","action","type","MyCountFunc","count","dispatchCount","name","setName","context","console","log","e","target","value","MyCount","Component","componentDidMount","interval","setInterval","setState","componentWillUnmount","clearInterval","render"],"mappings":";;;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,eAJF,EAKEC,UALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,OARF,EASEC,WATF,QAUO,OAVP;AAWA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASG,WAAT,GAAuB;AACrB;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAyBf,UAAU,CAACS,YAAD,EAAe,CAAf,CAAzC;AACA,QAAM;AAAA,OAACO,IAAD;AAAA,OAAOC;AAAP,MAAkBnB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMoB,OAAO,GAAGhB,UAAU,CAACM,SAAD,CAA1B,CAJqB,CAKrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAb;AACD,GAJQ,EAIN,CAACN,KAAD,CAJM,CAAT,CArBqB,CA0BrB;AACA;AACA;AACA;AACA;AACA;;AACA,SACE,mBACE;AAAO,IAAA,KAAK,EAAEE,IAAd;AAAoB,IAAA,QAAQ,EAAEK,CAAC,IAAIJ,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV;AAA1C,IADF,EAEE,oBAAOT,KAAP,CAFF,EAIE;AAAQ,IAAA,OAAO,EAAE,MAAMC,aAAa,CAAC;AAAEH,MAAAA,IAAI,EAAE;AAAR,KAAD;AAApC,KAA0DE,KAA1D,CAJF,EAKE,iBAAII,OAAO,CAACK,KAAZ,CALF,CADF;AASD;;AACD,eAAeV,WAAf;;AACA,MAAMW,OAAN,SAAsB3B,KAAK,CAAC4B,SAA5B,CAAsC;AAAA;AAAA;;AAAA,mCAC5B;AACNX,MAAAA,KAAK,EAAE;AADD,KAD4B;AAAA;;AAIpCY,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKC,QAAL,CAAc;AAAEf,QAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWI,KAAX,GAAmB;AAA5B,OAAd;AACD,KAF0B,EAExB,IAFwB,CAA3B;AAGD;;AACDgB,EAAAA,oBAAoB,GAAG;AACrB,SAAKH,QAAL,GAAgBI,aAAa,CAAC,KAAKJ,QAAN,CAA7B,GAA+C,IAA/C;AACD;;AACDK,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAOlB,KAAP,CAAP;AACD;;AAdmC","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useReducer,\r\n  useLayoutEffect,\r\n  useContext,\r\n  useRef,\r\n  memo,\r\n  useMemo,\r\n  useCallback\r\n} from \"react\";\r\nimport MyContext from \"../../lib/my-context\";\r\nimport myContext from \"../../lib/my-context\";\r\n\r\nfunction countReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"add\":\r\n      return state + 1;\r\n    case \"minus\":\r\n      return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  //   const [count, setCount] = useState(0);\r\n  const [count, dispatchCount] = useReducer(countReducer, 0);\r\n  const [name, setName] = useState(\"lyn\");\r\n  const context = useContext(myContext);\r\n  //   const countRef = useRef();\r\n  //   countRef.current = count;\r\n  //   const handleAlertButtonClick = () => {\r\n  //     setTimeout(() => {\r\n  //       // alert(count)\r\n  //       alert(countRef.current);\r\n  //     }, 2000);\r\n  //   };\r\n  //   useEffect(() => {\r\n  //     const interval = setInterval(() => {\r\n  //       // 拿到的值永远是最新的值，避免闭包陷阱\r\n  //       //   setCount(c => c + 1);\r\n  //       dispatchCount({ type: \"minus\" });\r\n  //     }, 1000);\r\n  //     return () => clearInterval(interval);\r\n  //   }, []);\r\n  useEffect(() => {\r\n    // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\r\n    console.log(\"effect invokeed\");\r\n    return () => console.log(\"effect detected\");\r\n  }, [count]);\r\n  // useLayoutEffect dom出来前更新内容；里面需要存放很多要等待很长时间的代码，若非需要，尽量不使用\r\n  //   useLayoutEffect(() => {\r\n  //     // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\r\n  //     console.log(\"useLayoutEffect invokeed\");\r\n  //     return () => console.log(\"useLayoutEffect detected\");\r\n  //   }, [count]);\r\n  return (\r\n    <div>\r\n      <input value={name} onChange={e => setName(e.target.value)} />\r\n      <span>{count}</span>\r\n      {/* <Child config={config} onButtonClick={handleButtonClick}></Child> */}\r\n      <button onClick={() => dispatchCount({ type: \"minus\" })}>{count}</button>\r\n      <p>{context.value}</p>\r\n    </div>\r\n  );\r\n}\r\nexport default MyCountFunc;\r\nclass MyCount extends React.Component {\r\n  state = {\r\n    count: 0\r\n  };\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ count: this.state.count + 1 });\r\n    }, 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    this.interval ? clearInterval(this.interval) : null;\r\n  }\r\n  render() {\r\n    return <span>{count}</span>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}