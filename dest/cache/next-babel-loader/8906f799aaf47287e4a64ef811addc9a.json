{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useReducer, useLayoutEffect, useContext, useRef, memo, useMemo, useCallback } from \"react\";\nimport MyContext from \"../../lib/my-context\";\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case \"add\":\n      return state + 1;\n\n    case \"minus\":\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  //   const [count, setCount] = useState(0);\n  var _useReducer = useReducer(countReducer, 0),\n      count = _useReducer[0],\n      dispatchCount = _useReducer[1];\n\n  var _useState = useState(\"lyn\"),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var context = useContext(MyContext);\n  var inputRef = useRef(); // countRef.current = count;\n  //   const handleAlertButtonClick = () => {\n  //     setTimeout(() => {\n  //       // alert(count)\n  //       alert(countRef.current);\n  //     }, 2000);\n  //   };\n  //   useEffect(() => {\n  //     const interval = setInterval(() => {\n  //       // 拿到的值永远是最新的值，避免闭包陷阱\n  //       //   setCount(c => c + 1);\n  //       dispatchCount({ type: \"minus\" });\n  //     }, 1000);\n  //     return () => clearInterval(interval);\n  //   }, []);\n\n  useEffect(function () {\n    // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\n    console.log(\"effect invokeed\");\n    console.log(inputRef);\n    return function () {\n      return console.log(\"effect detected\");\n    };\n  }, [count]); // useLayoutEffect dom出来前更新内容；里面需要存放很多要等待很长时间的代码，若非需要，尽量不使用\n  //   useLayoutEffect(() => {\n  //     // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\n  //     console.log(\"useLayoutEffect invokeed\");\n  //     return () => console.log(\"useLayoutEffect detected\");\n  //   }, [count]);\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: name,\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    },\n    ref: inputRef\n  }), __jsx(\"span\", null, count), __jsx(\"button\", {\n    onClick: function onClick() {\n      return dispatchCount({\n        type: \"minus\"\n      });\n    }\n  }, count), __jsx(\"p\", null, context));\n}\n\nexport default MyCountFunc;\n\nvar MyCount = /*#__PURE__*/function (_React$Component) {\n  _inherits(MyCount, _React$Component);\n\n  function MyCount() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyCount);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyCount)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      count: 0\n    });\n\n    return _this;\n  }\n\n  _createClass(MyCount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        _this2.setState({\n          count: _this2.state.count + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.interval ? clearInterval(this.interval) : null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"span\", null, count);\n    }\n  }]);\n\n  return MyCount;\n}(React.Component);","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/test/b.js"],"names":["React","useState","useEffect","useReducer","useLayoutEffect","useContext","useRef","memo","useMemo","useCallback","MyContext","countReducer","state","action","type","MyCountFunc","count","dispatchCount","name","setName","context","inputRef","console","log","e","target","value","MyCount","interval","setInterval","setState","clearInterval","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,eAJF,EAKEC,UALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,OARF,EASEC,WATF,QAUO,OAVP;AAWA,OAAOC,SAAP,MAAsB,sBAAtB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASG,WAAT,GAAuB;AACrB;AADqB,oBAEUZ,UAAU,CAACQ,YAAD,EAAe,CAAf,CAFpB;AAAA,MAEdK,KAFc;AAAA,MAEPC,aAFO;;AAAA,kBAGGhB,QAAQ,CAAC,KAAD,CAHX;AAAA,MAGdiB,IAHc;AAAA,MAGRC,OAHQ;;AAIrB,MAAMC,OAAO,GAAGf,UAAU,CAACK,SAAD,CAA1B;AACA,MAAMW,QAAQ,GAAGf,MAAM,EAAvB,CALqB,CAMrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,EAAAA,SAAS,CAAC,YAAM;AACd;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAO;AAAA,aAAMC,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAN;AAAA,KAAP;AACD,GALQ,EAKN,CAACP,KAAD,CALM,CAAT,CArBqB,CA2BrB;AACA;AACA;AACA;AACA;AACA;;AACA,SACE,mBACE;AACE,IAAA,KAAK,EAAEE,IADT;AAEE,IAAA,QAAQ,EAAE,kBAAAM,CAAC;AAAA,aAAIL,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AAAA,KAFb;AAGE,IAAA,GAAG,EAAEL;AAHP,IADF,EAME,oBAAOL,KAAP,CANF,EAQE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMC,aAAa,CAAC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAnB;AAAA;AAAjB,KAA0DE,KAA1D,CARF,EASE,iBAAII,OAAJ,CATF,CADF;AAaD;;AACD,eAAeL,WAAf;;IACMY,O;;;;;;;;;;;;;;;;4DACI;AACNX,MAAAA,KAAK,EAAE;AADD,K;;;;;;;wCAGY;AAAA;;AAClB,WAAKY,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAChC,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEd,UAAAA,KAAK,EAAE,MAAI,CAACJ,KAAL,CAAWI,KAAX,GAAmB;AAA5B,SAAd;AACD,OAF0B,EAExB,IAFwB,CAA3B;AAGD;;;2CACsB;AACrB,WAAKY,QAAL,GAAgBG,aAAa,CAAC,KAAKH,QAAN,CAA7B,GAA+C,IAA/C;AACD;;;6BACQ;AACP,aAAO,oBAAOZ,KAAP,CAAP;AACD;;;;EAdmBhB,KAAK,CAACgC,S","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useReducer,\r\n  useLayoutEffect,\r\n  useContext,\r\n  useRef,\r\n  memo,\r\n  useMemo,\r\n  useCallback\r\n} from \"react\";\r\nimport MyContext from \"../../lib/my-context\";\r\n\r\nfunction countReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"add\":\r\n      return state + 1;\r\n    case \"minus\":\r\n      return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  //   const [count, setCount] = useState(0);\r\n  const [count, dispatchCount] = useReducer(countReducer, 0);\r\n  const [name, setName] = useState(\"lyn\");\r\n  const context = useContext(MyContext);\r\n  const inputRef = useRef();\r\n  // countRef.current = count;\r\n  //   const handleAlertButtonClick = () => {\r\n  //     setTimeout(() => {\r\n  //       // alert(count)\r\n  //       alert(countRef.current);\r\n  //     }, 2000);\r\n  //   };\r\n  //   useEffect(() => {\r\n  //     const interval = setInterval(() => {\r\n  //       // 拿到的值永远是最新的值，避免闭包陷阱\r\n  //       //   setCount(c => c + 1);\r\n  //       dispatchCount({ type: \"minus\" });\r\n  //     }, 1000);\r\n  //     return () => clearInterval(interval);\r\n  //   }, []);\r\n  useEffect(() => {\r\n    // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\r\n    console.log(\"effect invokeed\");\r\n    console.log(inputRef);\r\n    return () => console.log(\"effect detected\");\r\n  }, [count]);\r\n  // useLayoutEffect dom出来前更新内容；里面需要存放很多要等待很长时间的代码，若非需要，尽量不使用\r\n  //   useLayoutEffect(() => {\r\n  //     // 每次有渲染，就先执行return，再执行回调;;一旦用到了某一个state就要当做第二个参数传入，作为依赖，useEffect会判断是否根据依赖更新\r\n  //     console.log(\"useLayoutEffect invokeed\");\r\n  //     return () => console.log(\"useLayoutEffect detected\");\r\n  //   }, [count]);\r\n  return (\r\n    <div>\r\n      <input\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <span>{count}</span>\r\n      {/* <Child config={config} onButtonClick={handleButtonClick}></Child> */}\r\n      <button onClick={() => dispatchCount({ type: \"minus\" })}>{count}</button>\r\n      <p>{context}</p>\r\n    </div>\r\n  );\r\n}\r\nexport default MyCountFunc;\r\nclass MyCount extends React.Component {\r\n  state = {\r\n    count: 0\r\n  };\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ count: this.state.count + 1 });\r\n    }, 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    this.interval ? clearInterval(this.interval) : null;\r\n  }\r\n  render() {\r\n    return <span>{count}</span>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}