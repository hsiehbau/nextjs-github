{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 本文件是用来修改nextjs默认环境的地方，每个页面都回去渲染这个组件，这是个渲染组件，\n// import App from \"next/app\";\nimport App, { Container } from \"next/app\";\nimport \"antd/dist/antd.css\";\nimport { Provider } from \"react-redux\";\nimport Layout from \"../components/Layout\";\nimport MyContext from \"../lib/my-context\";\nimport store from \"./store/store\";\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      context: \"value\"\n    });\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    // const { Component } = ctx;\n    console.log(\"app init\");\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    console.log(Component);\n    return __jsx(Layout, null, __jsx(Provider, {\n      store: store\n    }, __jsx(MyContext.Provider, {\n      value: this.state.context\n    }, __jsx(Component, pageProps))));\n  }\n\n}\n\nexport default MyApp; // import \"antd/dist/antd.css\";\n// import { Provider } from 'react-redux'\n// import Router from 'next/router'\n// import Link from 'next/link'\n// import PageLoading from '../components/PageLoading'\n// import withRedux from '../lib/with-redux'\n// class MyApp extends App {\n//   state = {\n//     context: 'value',\n//     loading: false,\n//   }\n//   startLoading = () => {\n//     this.setState({\n//       loading: true,\n//     })\n//   }\n//   stopLoading = () => {\n//     this.setState({\n//       loading: false,\n//     })\n//   }\n//   componentDidMount() {\n//     Router.events.on('routeChangeStart', this.startLoading)\n//     Router.events.on('routeChangeComplete', this.stopLoading)\n//     Router.events.on('routeChangeError', this.stopLoading)\n//   }\n//   componentWillUnmount() {\n//     Router.events.off('routeChangeStart', this.startLoading)\n//     Router.events.off('routeChangeComplete', this.stopLoading)\n//     Router.events.off('routeChangeError', this.stopLoading)\n//   }\n//   static async getInitialProps(ctx) {\n//     const { Component } = ctx\n//     console.log('app init')\n//     let pageProps = {}\n//     if (Component.getInitialProps) {\n//       pageProps = await Component.getInitialProps(ctx)\n//     }\n//     return { pageProps }\n//   }\n//   render() {\n//     const { Component, pageProps, reduxStore } = this.props\n//     return (\n//       <Container>\n//         <Provider store={reduxStore}>\n//           {this.state.loading ? <PageLoading /> : null}\n//           <Layout>\n//             <Component {...pageProps} />\n//           </Layout>\n//         </Provider>\n//       </Container>\n//     )\n//   }\n// }\n// export default withRedux(MyApp)","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/_app.js"],"names":["App","Container","Provider","Layout","MyContext","store","MyApp","context","getInitialProps","Component","ctx","console","log","pageProps","render","props","state"],"mappings":";;;;;AAAA;AACA;AACA,OAAOA,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,OAAO,oBAAP;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AACA,MAAMC,KAAN,SAAoBN,GAApB,CAAwB;AAAA;AAAA;;AAAA,mCACd;AACNO,MAAAA,OAAO,EAAE;AADH,KADc;AAAA;;AAItB,eAAaC,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEA,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAIJ,SAAS,CAACD,eAAd,EAA+B;AAC7BK,MAAAA,SAAS,GAAG,MAAMJ,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD;;AAED,WAAO;AAAEG,MAAAA;AAAF,KAAP;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEL,MAAAA,SAAF;AAAaI,MAAAA;AAAb,QAA2B,KAAKE,KAAtC;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACA,WACE,MAAC,MAAD,QACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEJ;AAAjB,OACE,MAAC,SAAD,CAAW,QAAX;AAAoB,MAAA,KAAK,EAAE,KAAKW,KAAL,CAAWT;AAAtC,OACE,MAAC,SAAD,EAAeM,SAAf,CADF,CADF,CADF,CADF;AAgBD;;AAnCqB;;AAqCxB,eAAeP,KAAf,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// 本文件是用来修改nextjs默认环境的地方，每个页面都回去渲染这个组件，这是个渲染组件，\n// import App from \"next/app\";\nimport App, { Container } from \"next/app\";\nimport \"antd/dist/antd.css\";\nimport { Provider } from \"react-redux\";\n\nimport Layout from \"../components/Layout\";\nimport MyContext from \"../lib/my-context\";\nimport store from \"./store/store\";\nclass MyApp extends App {\n  state = {\n    context: \"value\"\n  };\n  static async getInitialProps({ Component, ctx }) {\n    // const { Component } = ctx;\n    console.log(\"app init\");\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return { pageProps };\n  }\n  render() {\n    const { Component, pageProps } = this.props;\n    console.log(Component);\n    return (\n      <Layout>\n        <Provider store={store}>\n          <MyContext.Provider value={this.state.context}>\n            <Component {...pageProps} />\n            {/* <button\n              onClick={() =>\n                this.setState({ context: `${this.state.context}1111` })\n              }\n            >\n              update context\n            </button> */}\n          </MyContext.Provider>\n        </Provider>\n      </Layout>\n    );\n  }\n}\nexport default MyApp;\n\n// import \"antd/dist/antd.css\";\n// import { Provider } from 'react-redux'\n// import Router from 'next/router'\n// import Link from 'next/link'\n\n// import PageLoading from '../components/PageLoading'\n\n// import withRedux from '../lib/with-redux'\n\n// class MyApp extends App {\n//   state = {\n//     context: 'value',\n//     loading: false,\n//   }\n\n//   startLoading = () => {\n//     this.setState({\n//       loading: true,\n//     })\n//   }\n\n//   stopLoading = () => {\n//     this.setState({\n//       loading: false,\n//     })\n//   }\n\n//   componentDidMount() {\n//     Router.events.on('routeChangeStart', this.startLoading)\n//     Router.events.on('routeChangeComplete', this.stopLoading)\n//     Router.events.on('routeChangeError', this.stopLoading)\n//   }\n\n//   componentWillUnmount() {\n//     Router.events.off('routeChangeStart', this.startLoading)\n//     Router.events.off('routeChangeComplete', this.stopLoading)\n//     Router.events.off('routeChangeError', this.stopLoading)\n//   }\n\n//   static async getInitialProps(ctx) {\n//     const { Component } = ctx\n//     console.log('app init')\n\n//     let pageProps = {}\n\n//     if (Component.getInitialProps) {\n//       pageProps = await Component.getInitialProps(ctx)\n//     }\n\n//     return { pageProps }\n//   }\n\n//   render() {\n//     const { Component, pageProps, reduxStore } = this.props\n\n//     return (\n//       <Container>\n//         <Provider store={reduxStore}>\n//           {this.state.loading ? <PageLoading /> : null}\n//           <Layout>\n//             <Component {...pageProps} />\n//           </Layout>\n//         </Provider>\n//       </Container>\n//     )\n//   }\n// }\n\n// export default withRedux(MyApp)\n"]},"metadata":{},"sourceType":"module"}