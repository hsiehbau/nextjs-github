{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useReducer, useLayoutEffect, useContext, useRef, memo, useMemo, useCallback } from \"react\";\n\nfunction MyCountFunc() {\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return __jsx(\"span\", null, count);\n}\n\nexport default MyCountFunc;\n\nclass MyCount extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.interval ? clearInterval(this.interval) : null;\n  }\n\n  render() {\n    return __jsx(\"span\", null, count);\n  }\n\n}","map":{"version":3,"sources":["D:/GitHub/nextjs-project/pages/test/b.js"],"names":["React","useState","useEffect","useReducer","useLayoutEffect","useContext","useRef","memo","useMemo","useCallback","MyCountFunc","count","setCount","interval","setInterval","c","clearInterval","MyCount","Component","componentDidMount","setState","state","componentWillUnmount","render"],"mappings":";;;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,eAJF,EAKEC,UALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,OARF,EASEC,WATF,QAUO,OAVP;;AAWA,SAASC,WAAT,GAAuB;AACrB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCF,MAAAA,QAAQ,CAACG,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAR;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAMC,aAAa,CAACH,QAAD,CAA1B;AACD,GALQ,EAKN,EALM,CAAT;AAOA,SAAO,oBAAOF,KAAP,CAAP;AACD;;AACD,eAAeD,WAAf;;AACA,MAAMO,OAAN,SAAsBjB,KAAK,CAACkB,SAA5B,CAAsC;AAAA;AAAA;;AAAA,mCAC5B;AACNP,MAAAA,KAAK,EAAE;AADD,KAD4B;AAAA;;AAIpCQ,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKM,QAAL,CAAc;AAAET,QAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KAAX,GAAmB;AAA5B,OAAd;AACD,KAF0B,EAExB,IAFwB,CAA3B;AAGD;;AACDW,EAAAA,oBAAoB,GAAG;AACrB,SAAKT,QAAL,GAAgBG,aAAa,CAAC,KAAKH,QAAN,CAA7B,GAA+C,IAA/C;AACD;;AACDU,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAOZ,KAAP,CAAP;AACD;;AAdmC","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useReducer,\r\n  useLayoutEffect,\r\n  useContext,\r\n  useRef,\r\n  memo,\r\n  useMemo,\r\n  useCallback\r\n} from \"react\";\r\nfunction MyCountFunc() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCount(c => c + 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return <span>{count}</span>;\r\n}\r\nexport default MyCountFunc;\r\nclass MyCount extends React.Component {\r\n  state = {\r\n    count: 0\r\n  };\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ count: this.state.count + 1 });\r\n    }, 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    this.interval ? clearInterval(this.interval) : null;\r\n  }\r\n  render() {\r\n    return <span>{count}</span>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}